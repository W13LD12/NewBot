from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from fsm import DayLog
from datetime import datetime

from database import get_or_create_daily_log, save_daily_log

router = Router(name="day")


# üìÖ /–¥–µ–Ω—å ‚Äî FSM –ª–æ–≥ –¥–Ω—è (–≤–æ–¥–∞, —Å–∏–≥–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –º—ã—Å–ª–∏)
@router.message(Command("–¥–µ–Ω—å"))
async def start_day_log(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª (–≤ –º–ª)?")
    await state.set_state(DayLog.water)


@router.message(DayLog.water)
async def log_smoke(message: Message, state: FSMContext):
    try:
        water = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –º–ª.")
        return
    await state.update_data(water=water)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–∏–≥–∞—Ä–µ—Ç –≤—ã–∫—É—Ä–∏–ª?")
    await state.set_state(DayLog.smoke)


@router.message(DayLog.smoke)
async def log_activity(message: Message, state: FSMContext):
    try:
        smoke = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ —Å–∏–≥–∞—Ä–µ—Ç.")
        return
    await state.update_data(smoke=smoke)
    await message.answer("–ë—ã–ª–∞ –ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(DayLog.activity)


@router.message(DayLog.activity)
async def log_mood(message: Message, state: FSMContext):
    activity = message.text.strip().lower()
    await state.update_data(activity=activity)
    await message.answer("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?")
    await state.set_state(DayLog.mood)


@router.message(DayLog.mood)
async def log_thoughts(message: Message, state: FSMContext):
    try:
        mood = int(message.text.strip())
        if not (1 <= mood <= 10): raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    await state.update_data(mood=mood)
    await message.answer("–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –º—ã—Å–ª–∏ –∑–∞ –¥–µ–Ω—å?")
    await state.set_state(DayLog.thoughts)


@router.message(DayLog.thoughts)
async def finish_day_log(message: Message, state: FSMContext):
    thoughts = message.text.strip()
    data = await state.get_data()

    db_data = await get_or_create_daily_log(message.from_user.id)
    db_data.update({
        "water": data["water"],
        "smoke": data["smoke"],
        "activity": data["activity"],
        "mood": data["mood"],
        "thoughts": thoughts
    })

    await save_daily_log(message.from_user.id, db_data)
    await state.clear()

    await message.answer("‚úÖ –õ–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞.")


# üßæ /–æ—Ç—á—ë—Ç ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –ª–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@router.message(Command("–æ—Ç—á—ë—Ç"))
async def show_day_log(message: Message):
    data = await get_or_create_daily_log(message.from_user.id)
    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    text = (
        f"üßæ –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n"
        f"üíß –í–æ–¥–∞: {data.get('water', 0)} –º–ª\n"
        f"üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã: {data.get('smoke', 0)}\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data.get('activity', '–Ω–µ—Ç')}\n"
        f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data.get('mood', '-')}\n"
        f"üß† –ú—ã—Å–ª–∏: {data.get('thoughts', '‚Äî')}"
    )
    await message.answer(text)