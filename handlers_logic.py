import logging
import sqlite3
import tempfile
import os
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from openpyxl import Workbook

from fsm import AddHabit, DayLog, AddCustomField, FinanceLog
from config import bot, OWNER_ID, GROUP_CHAT_ID
from database import (
    save_custom_field,
    get_nutrition_summary,
    get_product_by_name,
    add_product,
    get_products,
    add_meal,
    update_product,
    get_finance_categories,
    add_finance_operation,
    add_finance_category
)


from utils import user_habits

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
@router.message(Command('start'))
async def start_handler(message: Message):
    user_id = message.from_user.id
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start")
    user_habits[user_id] = await load_habits_from_db(user_id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.\n\n"
        "üß≠ –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã."
    )
# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(   
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω–æ–µ:\n"
        "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É (–ø–æ–ª–µ–∑–Ω—É—é –∏–ª–∏ –≤—Ä–µ–¥–Ω—É—é)\n"
        "‚Ä¢ /day ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥ –¥–Ω—è (–≤–æ–¥–∞, –µ–¥–∞, —Å–∏–≥–∞—Ä–µ—Ç—ã, –º—ã—Å–ª–∏...)\n"
        "‚Ä¢ /report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "‚Ä¢ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n"
        "‚Ä¢ /deletehabit ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n\n"
        "üìÖ –õ–æ–≥–∏:\n"
        "‚Ä¢ /history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ /week ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ /month ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü\n\n"
        "üí° –ö–∞—Å—Ç–æ–º:\n"
        "‚Ä¢ /custom ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –ø–æ–ª–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫\n"
        "‚Ä¢ /delcustom ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ\n\n"
        "üçé –ü—Ä–æ–¥—É–∫—Ç—ã:\n"
        "‚Ä¢ /products ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ /delproduct ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
        "‚Ä¢ /editproduct ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n\n"
        "üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
        "‚Ä¢ /finance ‚Äî —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ /categories ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n"
        "‚Ä¢ /balance ‚Äî –±–∞–ª–∞–Ω—Å –∑–∞ –Ω–µ–¥–µ–ª—é\n\n"
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "‚Ä¢ /remind HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ /remind_off ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    )


# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –∑–∞–ø—É—Å–∫ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(Command("add"))
async def add_cmd(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    await state.set_state(AddHabit.waiting_for_name)
    logger.info(f"[ADD] user={message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")

# –®–∞–≥ 1 ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(AddHabit.waiting_for_name)
async def habit_name_received(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(habit_name=name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª–µ–∑–Ω–∞—è", callback_data="type_good")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –í—Ä–µ–¥–Ω–∞—è", callback_data="type_bad")]
    ])
    await message.answer("–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–ª–∏ –≤—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞?", reply_markup=keyboard)
    await state.set_state(AddHabit.waiting_for_type)

# –®–∞–≥ 2 ‚Äî —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(AddHabit.waiting_for_type)
async def habit_type_received(callback: CallbackQuery, state: FSMContext):
    habit_type = callback.data.split("_")[1]
    await state.update_data(habit_type=habit_type)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úî –í—ã–ø–æ–ª–Ω–∏–ª/–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data="track_bool")],
        [InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="track_qty")]
    ])
    await callback.message.answer("–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?", reply_markup=keyboard)
    await state.set_state(AddHabit.waiting_for_tracking)
    await callback.answer()

# –®–∞–≥ 3 ‚Äî —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–¥–∞/–Ω–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
@router.callback_query(AddHabit.waiting_for_tracking)
async def tracking_type_received(callback: CallbackQuery, state: FSMContext):
    tracking = callback.data.split("_")[1]
    await state.update_data(tracking_type=tracking)
    if tracking == "qty":
        await callback.message.answer("–£–∫–∞–∂–∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–ª, —à—Ç):")
        await state.set_state(AddHabit.waiting_for_unit)
    else:
        await send_deadline_keyboard(callback.message)
        await state.set_state(AddHabit.waiting_for_deadline)
    await callback.answer()

# –®–∞–≥ 4 (–µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) ‚Äî –≤–≤–æ–¥ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
@router.message(AddHabit.waiting_for_unit)
async def unit_received(message: Message, state: FSMContext):
    unit = message.text.strip()
    if not unit:
        await message.answer("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(unit=unit)
    await send_deadline_keyboard(message)
    await state.set_state(AddHabit.waiting_for_deadline)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
async def send_deadline_keyboard(msg: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è +1 —á–∞—Å", callback_data="dl_plus1h")],
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è –≤ 20:00", callback_data="dl_20")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ –≤ 09:00", callback_data="dl_tomorrow")],
        [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="dl_manual")]
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏ –¥–µ–¥–ª–∞–π–Ω:", reply_markup=keyboard)

# –®–∞–≥ 5 ‚Äî –≤—ã–±–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞
@router.callback_query(AddHabit.waiting_for_deadline)
async def deadline_chosen(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    now = datetime.now()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –¥–∞—Ç—É
    if data == "dl_plus1h":
        deadline = now + timedelta(hours=1)
    elif data == "dl_20":
        deadline = now.replace(hour=20, minute=0, second=0, microsecond=0)
    elif data == "dl_tomorrow":
        deadline = (now + timedelta(days=1)).replace(hour=9, minute=0, second=0, microsecond=0)
    elif data == "dl_manual":
        await callback.message.answer("–í–≤–µ–¥–∏ –¥–µ–¥–ª–∞–π–Ω –≤—Ä—É—á–Ω—É—é (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        await state.set_state(AddHabit.waiting_for_manual_deadline)
        await callback.answer()
        return
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞")
        return

    await state.update_data(deadline=deadline.isoformat())
    await send_repeat_keyboard(callback.message)
    await state.set_state(AddHabit.waiting_for_repeat)
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≤—ã–±–æ—Ä –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
async def send_repeat_keyboard(msg: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="repeat_daily")],
        [InlineKeyboardButton(text="–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="repeat_weekly")],
        [InlineKeyboardButton(text="–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", callback_data="repeat_none")]
    ])
    await msg.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä?", reply_markup=keyboard)

# –®–∞–≥ 6 (–µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞)
@router.message(AddHabit.waiting_for_manual_deadline)
async def manual_deadline_entered(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        deadline = datetime.strptime(text, "%Y-%m-%d %H:%M")
        await state.update_data(deadline=deadline.isoformat())
        await send_repeat_keyboard(message)
        await state.set_state(AddHabit.waiting_for_repeat)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ –≤–∏–¥–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
# –®–∞–≥ 7 ‚Äî –≤—ã–±–æ—Ä –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(AddHabit.waiting_for_repeat)
async def repeat_chosen(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä: repeat_daily ‚Üí daily
    repeat = callback.data.replace("repeat_", "")
    await state.update_data(repeat=repeat)

    data = await state.get_data()
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ FSM
    name = data["habit_name"]
    habit_type = data["habit_type"]
    tracking = data["tracking_type"]
    unit = data.get("unit", "")
    deadline = data.get("deadline", "")
    repeat_value = repeat

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_habits_to_db(user_id, name, {
        "habit_type": habit_type,
        "tracking_type": tracking,
        "unit": unit,
        "deadline": deadline,
        "repeat": repeat_value
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏–≤—ã—á–µ–∫
    user_habits[user_id] = await load_habits_from_db(user_id)

    await callback.message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

# ===== /report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ =====
@router.message(Command("report"))
async def report_cmd(message: Message):
    user_id = message.from_user.id
    habits = user_habits.get(user_id, {})

    if not habits:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —Å –ø–æ–º–æ—â—å—é /add")
        return

    text = "üìã –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for i, (name, h) in enumerate(habits.items(), 1):
        habit_type = "–ø–æ–ª–µ–∑–Ω–∞—è" if h["habit_type"] == "good" else "–≤—Ä–µ–¥–Ω–∞—è"
        tracking_type = "–∫–æ–ª-–≤–æ" if h.get("tracking_type") == "qty" else "–¥–∞/–Ω–µ—Ç"
        unit = f" ({h['unit']})" if h.get("unit") else ""
        text += f"{i}. {name} ‚Äî {habit_type} / {tracking_type}{unit}\n"

    await message.answer(text)

# ===== /deletehabit ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ =====
@router.message(Command("deletehabit"))
async def delete_habit_start(message: Message):
    user_id = message.from_user.id
    habits = user_habits.get(user_id, {})

    if not habits:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"delete:{name}")]
            for name in habits
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete:"))
async def confirm_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.data.split(":")[1]

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    await delete_habit_from_db(user_id, name)
    user_habits[user_id] = await load_habits_from_db(user_id)

    await callback.message.edit_text(f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()

# ===== /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –ª–æ–≥–æ–≤ –≤ Excel =====
@router.message(Command("export"))
async def export_to_excel(message: Message):
    import json
    from database import get_custom_fields

    user_id = message.from_user.id
    habits = user_habits.get(user_id, {})

    # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª
    wb = Workbook()
    ws_habits = wb.active
    ws_habits.title = "–ü—Ä–∏–≤—ã—á–∫–∏"
    ws_habits.append(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–ø", "–¢—Ä–µ–∫", "–ï–¥–∏–Ω–∏—Ü–∞", "–î–µ–¥–ª–∞–π–Ω", "–ü–æ–≤—Ç–æ—Ä"])

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç –ø—Ä–∏–≤—ã—á–µ–∫
    for name, h in habits.items():
        ws_habits.append([
            name,
            "–ü–æ–ª–µ–∑–Ω–∞—è" if h.get("habit_type") == "good" else "–í—Ä–µ–¥–Ω–∞—è",
            "–î–∞/–Ω–µ—Ç" if h.get("tracking_type") == "bool" else "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            h.get("unit", ""),
            h.get("deadline", ""),
            h.get("repeat", "")
        ])

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–æ–≤
    custom_fields = get_custom_fields(user_id)
    custom_names = [f[0] for f in custom_fields]

    # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç –ª–æ–≥–æ–≤ –¥–Ω—è
    ws_logs = wb.create_sheet("–õ–æ–≥–∏ –¥–Ω—è")
    headers = ["–î–∞—Ç–∞", "–í–æ–¥–∞ (–º–ª)", "–°–∏–≥–∞—Ä–µ—Ç—ã", "–ó–∞—Ä—è–¥–∫–∞", "–†–∞—Å—Ö–æ–¥—ã", "–î–æ—Ö–æ–¥", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è", "–ú—ã—Å–ª–∏"] + custom_names
    ws_logs.append(headers)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã
    with sqlite3.connect("habits.db") as conn:
        rows = conn.execute("""
            SELECT date, water, cigarettes, exercise, expenses, income, mood, energy, thoughts, custom_data
            FROM daily_logs WHERE user_id = ? ORDER BY date DESC
        """, (user_id,)).fetchall()

        for row in rows:
            (
                date, water, cigs, exercise, expenses,
                income, mood, energy, thoughts, custom_json
            ) = row
            try:
                custom_dict = json.loads(custom_json) if custom_json else {}
            except:
                custom_dict = {}

            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–æ–ª—è–º
            custom_values = [custom_dict.get(name, "") for name in custom_names]

            ws_logs.append([
                date, water, cigs, exercise, expenses,
                income, mood, energy, thoughts
            ] + custom_values)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
        wb.save(tmp.name)
        path = tmp.name

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª
    file_for_user = FSInputFile(path, filename="export.xlsx")
    await message.answer_document(file_for_user)

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü, –¥—É–±–ª–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø—É
    if user_id == OWNER_ID:
        file_for_group = FSInputFile(path, filename="export.xlsx")
        await bot.send_document(
            GROUP_CHAT_ID,
            file_for_group,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç @{message.from_user.username or user_id}"
        )

    os.remove(path)
    logger.info(f"[EXPORT_DONE] user={user_id} ‚Üí export.xlsx —É–¥–∞–ª—ë–Ω")


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@router.message(Command("remind"))
async def save_reminder(message: Message):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /remind HH:MM
    """
    from database import set_reminder
    import re

    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    match = re.match(r"/remind\s+(\d{1,2}):(\d{2})", text)
    if not match:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ /remind 09:00")
        return

    hours, minutes = map(int, match.groups())
    if not (0 <= hours < 24 and 0 <= minutes < 60):
        await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59")
        return

    formatted_time = f"{hours:02d}:{minutes:02d}"
    set_reminder(user_id, formatted_time)
    await message.answer(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {formatted_time}")

@router.message(Command("remind_off"))
async def turn_off_reminder(message: Message):
    """
    –û—Ç–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from database import delete_reminder

    user_id = message.from_user.id
    delete_reminder(user_id)
    await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")


# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è ---
@router.message(Command("–∫–∞—Å—Ç–æ–º"))
async def start_custom_field(message: Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞.
    """
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è:")
    await state.set_state(AddCustomField.waiting_for_name)

@router.message(AddCustomField.waiting_for_name)
async def custom_field_name(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è.
    """
    field_name = message.text.strip()
    if not field_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(field_name=field_name)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞/–ù–µ—Ç", callback_data="type_bool")],
        [InlineKeyboardButton(text="–ß–∏—Å–ª–æ", callback_data="type_int")],
        [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="type_text")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–ª—è:", reply_markup=keyboard)
    await state.set_state(AddCustomField.waiting_for_type)

@router.callback_query(F.data.startswith("type_"), AddCustomField.waiting_for_type)
async def custom_field_type(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É.
    """
    from database import add_custom_field

    field_type = callback.data.split("_")[1]  # type_bool -> bool
    data = await state.get_data()
    field_name = data.get("field_name")

    if not field_name:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—è.")
        return

    add_custom_field(callback.from_user.id, field_name, field_type)
    await callback.message.answer(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ ¬´{field_name}¬ª ({field_type}) –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@router.message(Command("delcustom"))
async def delete_custom_field_start(message: Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è.
    """
    from database import get_custom_fields
    user_id = message.from_user.id
    fields = get_custom_fields(user_id)
    if not fields:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"delcustom:{name}")]
            for name, _ in fields
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delcustom:"))
async def delete_custom_field_confirm(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –±–∞–∑—ã.
    """
    from database import delete_custom_field
    user_id = callback.from_user.id
    field_name = callback.data.split(":", 1)[1]

    delete_custom_field(user_id, field_name)
    await callback.message.edit_text(f"‚ùå –ü–æ–ª–µ '{field_name}' —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()


from fsm import CustomFieldInput
import json

@router.message(CustomFieldInput.waiting_for_bool_value)
async def handle_bool_field(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è —Ç–∏–ø–∞ bool (–¥–∞/–Ω–µ—Ç).
    """
    answer = message.text.strip().lower()
    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return
    value = answer == "–¥–∞"
    await handle_next_custom_field(message, state, value)

@router.message(CustomFieldInput.waiting_for_int_value)
async def handle_int_field(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è —Ç–∏–ø–∞ int (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
    """
    try:
        value = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return
    await handle_next_custom_field(message, state, value)

@router.message(CustomFieldInput.waiting_for_text_value)
async def handle_text_field(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è —Ç–∏–ø–∞ text (—Å—Ç—Ä–æ–∫–∞).
    """
    value = message.text.strip()
    await handle_next_custom_field(message, state, value)
async def handle_next_custom_field(message: Message, state: FSMContext, value):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø–æ–ª—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –¥–Ω—è, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
    """
    data = await state.get_data()
    index = data["current_field_index"]
    custom_fields = data["custom_fields"]
    answers = data["custom_answers"]

    field_name, _ = custom_fields[index]
    answers[field_name] = value

    index += 1
    if index >= len(custom_fields):
        # –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–Ω—è
        await save_full_day_log(message, state, answers)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
        field_name, field_type = custom_fields[index]
        await state.update_data(current_field_index=index, custom_answers=answers)
        if field_type == "bool":
            await message.answer(f"{field_name}? (–¥–∞/–Ω–µ—Ç)")
            await state.set_state(CustomFieldInput.waiting_for_bool_value)
        elif field_type == "int":
            await message.answer(f"{field_name}? (—á–∏—Å–ª–æ)")
            await state.set_state(CustomFieldInput.waiting_for_int_value)
        elif field_type == "text":
            await message.answer(f"{field_name}? (—Ç–µ–∫—Å—Ç)")
            await state.set_state(CustomFieldInput.waiting_for_text_value)



# --- –ò—Å—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ ---
@router.message(Command("history"))
async def history_handler(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    import json
    from database import get_custom_fields

    user_id = message.from_user.id
    custom_fields = get_custom_fields(user_id)
    custom_names = [f[0] for f in custom_fields]

    with sqlite3.connect("habits.db") as conn:
        rows = conn.execute("""
            SELECT date, water, cigarettes, exercise, expenses, income, mood, energy, thoughts, custom_data
            FROM daily_logs
            WHERE user_id = ?
            ORDER BY date DESC
            LIMIT 7
        """, (user_id,)).fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏.")
        return

    response = "üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π:\n"
    for row in rows:
        (
            date, water, cigs, exercise, expenses,
            income, mood, energy, thoughts, custom_json
        ) = row
        response += f"\nüìÖ <b>{date}</b>\n"
        response += f"üíß –í–æ–¥–∞: {water} –º–ª\n"

        nutrition = get_nutrition_summary(user_id, date)
        response += (
            f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ:\n"
            f"  ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {nutrition['calories']:.0f} –∫–∫–∞–ª\n"
            f"  ‚Ä¢ –ë–µ–ª–∫–∏: {nutrition['protein']:.1f} –≥\n"
            f"  ‚Ä¢ –ñ–∏—Ä—ã: {nutrition['fat']:.1f} –≥\n"
            f"  ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {nutrition['carbs']:.1f} –≥\n"
            f"  ‚Ä¢ –°–æ–ª—å: {nutrition['salt']:.1f} –≥\n"
            f"  ‚Ä¢ –°–∞—Ö–∞—Ä: {nutrition['sugar']:.1f} –≥\n"
        )

        response += f"üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã: {cigs}\n"
        response += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {exercise}\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ | –î–æ—Ö–æ–¥: {income} ‚ÇΩ\n"
        response += f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood} / ‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy}\n"
        response += f"üß† –ú—ã—Å–ª–∏: {thoughts or '‚Äî'}\n"

        try:
            custom_dict = json.loads(custom_json) if custom_json else {}
        except:
            custom_dict = {}

        if custom_dict:
            response += "üîß –ö–∞—Å—Ç–æ–º:\n"
            for name in custom_names:
                value = custom_dict.get(name, "‚Äî")
                response += f"‚Ä¢ {name}: {value}\n"
        response += "‚îÄ" * 25 + "\n"

    await message.answer(response, parse_mode="HTML")

@router.message(Command("week"))
async def week_handler(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    import json
    from database import get_custom_fields
    from datetime import datetime, timedelta

    user_id = message.from_user.id
    custom_fields = get_custom_fields(user_id)
    custom_names = [f[0] for f in custom_fields]

    since_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
    with sqlite3.connect("habits.db") as conn:
        rows = conn.execute("""
            SELECT date, water, cigarettes, exercise, expenses, income, mood, energy, thoughts, custom_data
            FROM daily_logs
            WHERE user_id = ? AND date >= ?
            ORDER BY date DESC
        """, (user_id, since_date)).fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return

    response = "üóìÔ∏è –õ–æ–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
    for row in rows:
        (
            date, water, cigs, exercise, expenses,
            income, mood, energy, thoughts, custom_json
        ) = row
        response += f"\nüìÖ <b>{date}</b>\n"
        response += f"üíß –í–æ–¥–∞: {water} –º–ª\n"

        nutrition = get_nutrition_summary(user_id, date)
        response += (
            f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ:\n"
            f"  ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {nutrition['calories']:.0f} –∫–∫–∞–ª\n"
            f"  ‚Ä¢ –ë–µ–ª–∫–∏: {nutrition['protein']:.1f} –≥\n"
            f"  ‚Ä¢ –ñ–∏—Ä—ã: {nutrition['fat']:.1f} –≥\n"
            f"  ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {nutrition['carbs']:.1f} –≥\n"
            f"  ‚Ä¢ –°–æ–ª—å: {nutrition['salt']:.1f} –≥\n"
            f"  ‚Ä¢ –°–∞—Ö–∞—Ä: {nutrition['sugar']:.1f} –≥\n"
        )

        response += f"üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã: {cigs}\n"
        response += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {exercise}\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ | –î–æ—Ö–æ–¥: {income} ‚ÇΩ\n"
        response += f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood} / ‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy}\n"
        response += f"üß† –ú—ã—Å–ª–∏: {thoughts or '‚Äî'}\n"

        try:
            custom_dict = json.loads(custom_json) if custom_json else {}
        except:
            custom_dict = {}

        if custom_dict:
            response += "üîß –ö–∞—Å—Ç–æ–º:\n"
            for name in custom_names:
                value = custom_dict.get(name, "‚Äî")
                response += f"‚Ä¢ {name}: {value}\n"
        response += "‚îÄ" * 25 + "\n"

    await message.answer(response, parse_mode="HTML")

@router.message(Command("month"))
async def month_handler(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    import json
    from database import get_custom_fields
    from datetime import datetime

    user_id = message.from_user.id
    custom_fields = get_custom_fields(user_id)
    custom_names = [f[0] for f in custom_fields]

    today = datetime.now()
    month_str = today.strftime("%Y-%m")  # –ø—Ä–∏–º–µ—Ä: "2025-07"
    with sqlite3.connect("habits.db") as conn:
        rows = conn.execute("""
            SELECT date, water, cigarettes, exercise, expenses, income, mood, energy, thoughts, custom_data
            FROM daily_logs
            WHERE user_id = ? AND date LIKE ?
            ORDER BY date DESC
        """, (user_id, f"{month_str}-%")).fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return

    response = f"üìÖ –õ–æ–≥ –∑–∞ {month_str}:\n"
    for row in rows:
        (
            date, water, cigs, exercise, expenses,
            income, mood, energy, thoughts, custom_json
        ) = row
        response += f"\nüìÖ <b>{date}</b>\n"
        response += f"üíß –í–æ–¥–∞: {water} –º–ª\n"

        nutrition = get_nutrition_summary(user_id, date)
        response += (
            f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ:\n"
            f"  ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {nutrition['calories']:.0f} –∫–∫–∞–ª\n"
            f"  ‚Ä¢ –ë–µ–ª–∫–∏: {nutrition['protein']:.1f} –≥\n"
            f"  ‚Ä¢ –ñ–∏—Ä—ã: {nutrition['fat']:.1f} –≥\n"
            f"  ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {nutrition['carbs']:.1f} –≥\n"
            f"  ‚Ä¢ –°–æ–ª—å: {nutrition['salt']:.1f} –≥\n"
            f"  ‚Ä¢ –°–∞—Ö–∞—Ä: {nutrition['sugar']:.1f} –≥\n"
        )

        response += f"üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã: {cigs}\n"
        response += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {exercise}\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ | –î–æ—Ö–æ–¥: {income} ‚ÇΩ\n"
        response += f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood} / ‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy}\n"
        response += f"üß† –ú—ã—Å–ª–∏: {thoughts or '‚Äî'}\n"

        try:
            custom_dict = json.loads(custom_json) if custom_json else {}
        except:
            custom_dict = {}

        if custom_dict:
            response += "üîß –ö–∞—Å—Ç–æ–º:\n"
            for name in custom_names:
                value = custom_dict.get(name, "‚Äî")
                response += f"‚Ä¢ {name}: {value}\n"
        response += "‚îÄ" * 25 + "\n"

    await message.answer(response, parse_mode="HTML")

@router.message(Command("–ø—Ä–æ–¥—É–∫—Ç—ã"))
async def show_products(message: Message):
    from database import get_products
    products = get_products()
    if not products:
        await message.answer("–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return
    text = "üçè –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n"
    for p in products:
        text += (
            f"‚Ä¢ {p[1]} ‚Äî "
            f"{p[2]} –∫–∫–∞–ª, "
            f"–ë:{p[3]} –ñ:{p[4]} –£:{p[5]} "
            f"–°–æ–ª—å:{p[6]} –°–∞—Ö–∞—Ä:{p[7]}\n"
        )
    await message.answer(text)

@router.message(Command("delproduct"))
async def delete_product_start(message: Message):
    from database import get_products
    products = get_products()
    if not products:
        await message.answer("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=p[1], callback_data=f"delprod:{p[0]}")]
            for p in products
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delprod:"))
async def delete_product_confirm(callback: CallbackQuery):
    from database import delete_product
    prod_id = int(callback.data.split(":")[1])
    delete_product(prod_id)
    await callback.message.edit_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω.")
    await callback.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_products, update_product

@router.message(Command("editproduct"))
async def edit_product_start(message: Message):
    products = get_products()
    if not products:
        await message.answer("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=p[1], callback_data=f"editprod:{p[0]}")]
            for p in products
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("editprod:"))
async def edit_product_select(callback: CallbackQuery, state: FSMContext):
    prod_id = int(callback.data.split(":")[1])
    await state.update_data(prod_id=prod_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ;\n–§–æ—Ä–º–∞—Ç: –∫–∞–ª–æ—Ä–∏–∏;–±–µ–ª–∫–∏;–∂–∏—Ä—ã;—É–≥–ª–µ–≤–æ–¥—ã;—Å–æ–ª—å;—Å–∞—Ö–∞—Ä"
    )
    await state.set_state("waiting_for_product_edit")

@router.message(F.state == "waiting_for_product_edit")
async def edit_product_save(message: Message, state: FSMContext):
    data = await state.get_data()
    prod_id = data.get("prod_id")
    try:
        parts = message.text.strip().split(";")
        if len(parts) != 6:
            raise ValueError
        calories, protein, fat, carbs, salt, sugar = map(float, parts)
        update_product(prod_id, calories, protein, fat, carbs, salt, sugar)
        await message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")
        await state.clear()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –∫–∞–ª–æ—Ä–∏–∏;–±–µ–ª–∫–∏;–∂–∏—Ä—ã;—É–≥–ª–µ–≤–æ–¥—ã;—Å–æ–ª—å;—Å–∞—Ö–∞—Ä")

# ===== /—Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ =====
@router.message(Command("—Ñ–∏–Ω–∞–Ω—Å—ã"))
async def start_finance_log(message: Message, state: FSMContext):
    await message.answer("–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å? (—Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥)")
    await state.set_state(FinanceLog.waiting_for_type)

@router.message(FinanceLog.waiting_for_type)
async def finance_type_received(message: Message, state: FSMContext):
    type_ = message.text.strip().lower()
    if type_ not in ["—Ä–∞—Å—Ö–æ–¥", "–¥–æ—Ö–æ–¥"]:
        await message.answer("–í–≤–µ–¥–∏ '—Ä–∞—Å—Ö–æ–¥' –∏–ª–∏ '–¥–æ—Ö–æ–¥'.")
        return
    await state.update_data(type=type_)
    user_id = message.from_user.id
    categories = get_finance_categories(user_id, "expense" if type_ == "—Ä–∞—Å—Ö–æ–¥" else "income")
    if categories:
        cat_list = "\n".join([f"{c[0]}. {c[1]}" for c in categories])
        await message.answer(f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{cat_list}\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    else:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await state.set_state(FinanceLog.waiting_for_category)

@router.message(FinanceLog.waiting_for_category)
async def finance_category_received(message: Message, state: FSMContext):
    cat_text = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    type_ = data["type"]
    categories = get_finance_categories(user_id, "expense" if type_ == "—Ä–∞—Å—Ö–æ–¥" else "income")
    cat_id = None
    for c in categories:
        if cat_text == str(c[0]) or cat_text.lower() == c[1].lower():
            cat_id = c[0]
            break
    if not cat_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        add_finance_category(user_id, cat_text, "expense" if type_ == "—Ä–∞—Å—Ö–æ–¥" else "income")
        categories = get_finance_categories(user_id, "expense" if type_ == "—Ä–∞—Å—Ö–æ–¥" else "income")
        cat_id = categories[-1][0]
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.update_data(category_id=cat_id)
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")
    await state.set_state(FinanceLog.waiting_for_amount)

@router.message(FinanceLog.waiting_for_amount)
async def finance_amount_received(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    date = datetime.now().strftime("%Y-%m-%d")
    add_finance_operation(user_id, date, data["category_id"], amount, "expense" if data["type"] == "—Ä–∞—Å—Ö–æ–¥" else "income")
    await message.answer(f"‚úÖ {data['type'].capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω: {amount} ‚ÇΩ")
    await state.clear()

@router.message(Command("–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
async def show_finance_categories(message: Message):
    user_id = message.from_user.id
    expenses = get_finance_categories(user_id, "expense")
    incomes = get_finance_categories(user_id, "income")
    text = "üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
    text += "\n".join([f"‚Ä¢ {c[1]}" for c in expenses]) or "‚Äî"
    text += "\n\nüí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:\n"
    text += "\n".join([f"‚Ä¢ {c[1]}" for c in incomes]) or "‚Äî"
    await message.answer(text)

@router.message(Command("–±–∞–ª–∞–Ω—Å"))
async def finance_report(message: Message):
    from database import get_finance_operations
    user_id = message.from_user.id
    today = datetime.now()
    week_ago = (today - timedelta(days=7)).strftime("%Y-%m-%d")
    today_str = today.strftime("%Y-%m-%d")
    ops = get_finance_operations(user_id, week_ago, today_str)

    if not ops:
        await message.answer("–ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return

    expenses = sum(op[2] for op in ops if op[4] == "expense")
    incomes = sum(op[2] for op in ops if op[4] == "income")
    text = (
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {expenses:.2f} ‚ÇΩ\n"
        f"üí∞ –î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {incomes:.2f} ‚ÇΩ\n"
        f"üìä –ë–∞–ª–∞–Ω—Å: {incomes - expenses:.2f} ‚ÇΩ"
    )
    await message.answer(text)
    from utils import last_activity_time
from datetime import datetime

@router.message()
async def handle_any_message(message: Message):
    global last_activity_time
    last_activity_time = datetime.now()
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

router = Router()

@router.message(F.text.lower() == "/cancel")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –¢—ã —Å–≤–æ–±–æ–¥–µ–Ω.")
# ===== cancel_handler.py =====
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

router = Router(name="cancel")

@router.message(F.text.lower() == "/cancel")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.")
    else:
        await state.clear()
        await message.answer("üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞.")
