from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import datetime, timedelta

from fsm import AddHabit
from database import save_habits_to_db, delete_habit_from_db, load_habits_from_db
from utils import user_habits

router = Router(name="habit")


# ü´Ä /add ‚Äî –∑–∞–ø—É—Å–∫ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(Command("add"))
async def add_cmd(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    await state.set_state(AddHabit.waiting_for_name)


@router.message(AddHabit.waiting_for_name)
async def habit_name_received(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(habit_name=name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª–µ–∑–Ω–∞—è", callback_data="type_good")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –í—Ä–µ–¥–Ω–∞—è", callback_data="type_bad")]
    ])
    await message.answer("–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–ª–∏ –≤—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞?", reply_markup=keyboard)
    await state.set_state(AddHabit.waiting_for_type)


@router.callback_query(AddHabit.waiting_for_type)
async def habit_type_received(callback: CallbackQuery, state: FSMContext):
    habit_type = callback.data.split("_")[1]
    await state.update_data(habit_type=habit_type)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úî –í—ã–ø–æ–ª–Ω–∏–ª/–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data="track_bool")],
        [InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="track_qty")]
    ])
    await callback.message.answer("–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?", reply_markup=keyboard)
    await state.set_state(AddHabit.waiting_for_tracking)
    await callback.answer()


@router.callback_query(AddHabit.waiting_for_tracking)
async def tracking_type_received(callback: CallbackQuery, state: FSMContext):
    tracking = callback.data.split("_")[1]
    await state.update_data(tracking_type=tracking)
    if tracking == "qty":
        await callback.message.answer("–£–∫–∞–∂–∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–ª, —à—Ç):")
        await state.set_state(AddHabit.waiting_for_unit)
    else:
        await send_deadline_keyboard(callback.message)
        await state.set_state(AddHabit.waiting_for_deadline)
    await callback.answer()


@router.message(AddHabit.waiting_for_unit)
async def unit_received(message: Message, state: FSMContext):
    unit = message.text.strip()
    if not unit:
        await message.answer("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(unit=unit)
    await send_deadline_keyboard(message)
    await state.set_state(AddHabit.waiting_for_deadline)


async def send_deadline_keyboard(msg: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è +1 —á–∞—Å", callback_data="dl_plus1h")],
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è –≤ 20:00", callback_data="dl_20")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ –≤ 09:00", callback_data="dl_tomorrow")],
        [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="dl_manual")]
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏ –¥–µ–¥–ª–∞–π–Ω:", reply_markup=keyboard)


@router.callback_query(AddHabit.waiting_for_deadline)
async def deadline_chosen(callback: CallbackQuery, state: FSMContext):
    now = datetime.now()
    data = callback.data

    if data == "dl_plus1h":
        deadline = now + timedelta(hours=1)
    elif data == "dl_20":
        deadline = now.replace(hour=20, minute=0)
    elif data == "dl_tomorrow":
        deadline = (now + timedelta(days=1)).replace(hour=9, minute=0)
    elif data == "dl_manual":
        await callback.message.answer("–í–≤–µ–¥–∏ –¥–µ–¥–ª–∞–π–Ω –≤—Ä—É—á–Ω—É—é (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        await state.set_state(AddHabit.waiting_for_manual_deadline)
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞")
        return

    await state.update_data(deadline=deadline.isoformat())
    await send_repeat_keyboard(callback.message)
    await state.set_state(AddHabit.waiting_for_repeat)
    await callback.answer()


async def send_repeat_keyboard(msg: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="repeat_daily")],
        [InlineKeyboardButton(text="–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="repeat_weekly")],
        [InlineKeyboardButton(text="–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", callback_data="repeat_none")]
    ])
    await msg.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä?", reply_markup=keyboard)


@router.message(AddHabit.waiting_for_manual_deadline)
async def manual_deadline_entered(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        deadline = datetime.strptime(text, "%Y-%m-%d %H:%M")
        await state.update_data(deadline=deadline.isoformat())
        await send_repeat_keyboard(message)
        await state.set_state(AddHabit.waiting_for_repeat)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —Ç–∞–∫: 2025-08-01 18:30")


@router.callback_query(AddHabit.waiting_for_repeat)
async def repeat_chosen(callback: CallbackQuery, state: FSMContext):
    repeat = callback.data.replace("repeat_", "")
    await state.update_data(repeat=repeat)

    data = await state.get_data()
    user_id = callback.from_user.id

    # üßæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    await save_habits_to_db(user_id, data["habit_name"], {
        "habit_type": data["habit_type"],
        "tracking_type": data["tracking_type"],
        "unit": data.get("unit", ""),
        "deadline": data.get("deadline", ""),
        "repeat": data.get("repeat", "")
    })

    user_habits[user_id] = await load_habits_from_db(user_id)
    await callback.message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{data['habit_name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


# üßæ /report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(Command("report"))
async def report_cmd(message: Message):
    user_id = message.from_user.id
    habits = user_habits.get(user_id, {})

    if not habits:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —Å –ø–æ–º–æ—â—å—é /add")
        return

    text = "üìã –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for i, (name, h) in enumerate(habits.items(), 1):
        habit_type = "–ø–æ–ª–µ–∑–Ω–∞—è" if h["habit_type"] == "good" else "–≤—Ä–µ–¥–Ω–∞—è"
        tracking_type = "–∫–æ–ª-–≤–æ" if h.get("tracking_type") == "qty" else "–¥–∞/–Ω–µ—Ç"
        unit = f" ({h['unit']})" if h.get("unit") else ""
        text += f"{i}. {name} ‚Äî {habit_type} / {tracking_type}{unit}\n"

    await message.answer(text)


# ‚ùå /deletehabit ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
@router.message(Command("deletehabit"))
async def delete_habit_start(message: Message):
    user_id = message.from_user.id
    habits = user_habits.get(user_id, {})

    if not habits:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"delete:{name}")]
            for name in habits
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete:"))
async def confirm_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.data.split(":")[1]

    await delete_habit_from_db(user_id, name)
    user_habits[user_id] = await load_habits_from_db(user_id)
    await callback.message.edit_text(f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()