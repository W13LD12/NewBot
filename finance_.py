from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from fsm import FinanceLog
from datetime import datetime

from database import add_finance_entry, get_finance_entries, get_balance, get_categories, add_category

router = Router(name="finance")


# üí∞ /–¥–µ–Ω—å–≥–∏ ‚Äî FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞
@router.message(Command("–¥–µ–Ω—å–≥–∏"))
async def start_money_entry(message: Message, state: FSMContext):
    await message.answer("–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?")
    await state.set_state(FinanceLog.entry_type)


@router.message(FinanceLog.entry_type)
async def get_amount(message: Message, state: FSMContext):
    entry_type = message.text.strip().lower()
    if entry_type not in ["–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"]:
        await message.answer("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ '–¥–æ—Ö–æ–¥' –∏–ª–∏ '—Ä–∞—Å—Ö–æ–¥'")
        return

    await state.update_data(entry_type=entry_type)
    await message.answer("–°–∫–æ–ª—å–∫–æ (–≤ —Ä—É–±–ª—è—Ö)?")
    await state.set_state(FinanceLog.amount)


@router.message(FinanceLog.amount)
async def get_category(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return

    await state.update_data(amount=amount)
    await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, —Ç–∞–∫—Å–∏):")
    await state.set_state(FinanceLog.category)


@router.message(FinanceLog.category)
async def save_money_entry(message: Message, state: FSMContext):
    category = message.text.strip()
    data = await state.get_data()

    await add_finance_entry(
        user_id=message.from_user.id,
        entry_type=data["entry_type"],
        amount=data["amount"],
        category=category,
        date=datetime.now().strftime("%Y-%m-%d")
    )

    sign = "+" if data["entry_type"] == "–¥–æ—Ö–æ–¥" else "-"
    await message.answer(f"üí∞ –ó–∞–ø–∏—Å–∞–Ω–æ: {sign}{data['amount']}‚ÇΩ ‚Äî {category}")
    await state.clear()


# üìã /—Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
@router.message(Command("—Ñ–∏–Ω–∞–Ω—Å—ã"))
async def show_finances(message: Message):
    entries = await get_finance_entries(message.from_user.id)
    if not entries:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.")
        return

    text = "üí∏ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for e in entries[-10:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        sign = "+" if e["type"] == "–¥–æ—Ö–æ–¥" else "-"
        text += f"{e['date']}: {sign}{e['amount']}‚ÇΩ ‚Äî {e['category']}\n"
    await message.answer(text)


# üíº /–±–∞–ª–∞–Ω—Å ‚Äî —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
@router.message(Command("–±–∞–ª–∞–Ω—Å"))
async def show_balance(message: Message):
    balance = await get_balance(message.from_user.id)
    await message.answer(f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ")


# üè∑ /–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
@router.message(Command("–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
async def manage_categories(message: Message):
    categories = await get_categories(message.from_user.id)
    text = "üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + ", ".join(categories) + "\n\n–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é: /–∫–∞—Ç–µ–≥–æ—Ä–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
    await message.answer(text)


@router.message(F.text.startswith("/–∫–∞—Ç–µ–≥–æ—Ä–∏—è "))
async def add_new_category(message: Message):
    name = message.text.replace("/–∫–∞—Ç–µ–≥–æ—Ä–∏—è ", "").strip()
    if not name:
        await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
        return
    await add_category(message.from_user.id, name)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
