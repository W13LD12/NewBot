from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from fsm import DayLog
from datetime import datetime

from database import get_or_create_daily_log, save_daily_log, load_products_from_db, save_product_to_db, delete_product_from_db, update_product_in_db

router = Router(name="food")


# üçΩ /–µ–¥–∞ ‚Äî –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
@router.message(Command("–µ–¥–∞"))
async def start_food_log(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω):")
    await state.set_state(DayLog.food_type)


@router.message(DayLog.food_type)
async def ask_product_name(message: Message, state: FSMContext):
    await state.update_data(food_type=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(DayLog.product_name)


@router.message(DayLog.product_name)
async def ask_grams(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º?")
    await state.set_state(DayLog.grams)


@router.message(DayLog.grams)
async def finish_food_log(message: Message, state: FSMContext):
    try:
        grams = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö.")
        return

    data = await state.get_data()
    product = data.get("product_name")
    food_type = data.get("food_type")

    db_data = await get_or_create_daily_log(message.from_user.id)
    date = datetime.now().strftime("%Y-%m-%d")

    food_entry = {
        "type": food_type,
        "product": product,
        "grams": grams
    }

    db_data.setdefault("food", []).append(food_entry)
    await save_daily_log(message.from_user.id, db_data)

    await message.answer(f"üçΩ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_type} ‚Äî {product} ({grams}–≥)")
    await state.clear()


# üìã /–ø—Ä–æ–¥—É–∫—Ç—ã ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@router.message(Command("–ø—Ä–æ–¥—É–∫—Ç—ã"))
async def list_products(message: Message):
    user_id = message.from_user.id
    products = await load_products_from_db(user_id)

    if not products:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –î–æ–±–∞–≤—å –ø—Ä–∏ –≤–≤–æ–¥–µ –µ–¥—ã.")
        return

    text = "üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:\n\n"
    for name, p in products.items():
        text += f"<b>{name}</b>: {p['calories']} –∫–∫–∞–ª, {p['protein']} –ë, {p['fat']} –ñ, {p['carbs']} –£\n"
    await message.answer(text)


# ‚ùå /delproduct ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
@router.message(Command("delproduct"))
async def delete_product(message: Message):
    user_id = message.from_user.id
    products = await load_products_from_db(user_id)
    if not products:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"delprod:{name}")]
        for name in products
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("delprod:"))
async def confirm_delete_product(callback: CallbackQuery):
    name = callback.data.split(":")[1]
    await delete_product_from_db(callback.from_user.id, name)
    await callback.message.edit_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{name}' —É–¥–∞–ª—ë–Ω.")
    await callback.answer()


# ‚úèÔ∏è /editproduct ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–ñ–£
@router.message(Command("editproduct"))
async def edit_product_prompt(message: Message):
    await message.answer("–§–æ—Ä–º–∞—Ç: <code>–Ω–∞–∑–≤–∞–Ω–∏–µ;–∫–∞–ª–æ—Ä–∏–∏;–±–µ–ª–∫–∏;–∂–∏—Ä—ã;—É–≥–ª–µ–≤–æ–¥—ã;—Å–æ–ª—å;—Å–∞—Ö–∞—Ä</code>")


@router.message(F.text.contains(";"))
async def handle_product_edit(message: Message):
    try:
        parts = message.text.strip().split(";")
        if len(parts) != 7:
            raise ValueError
        name, cal, pr, fat, carb, salt, sugar = parts
        await update_product_in_db(
            message.from_user.id,
            name,
            float(cal), float(pr), float(fat), float(carb), float(salt), float(sugar)
        )
        await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' –æ–±–Ω–æ–≤–ª—ë–Ω")
    except:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ –∫–∞–∫: <code>–Ω–∞–∑–≤–∞–Ω–∏–µ;–∫–∞–ª–æ—Ä–∏–∏;–±–µ–ª–∫–∏;–∂–∏—Ä—ã;—É–≥–ª–µ–≤–æ–¥—ã;—Å–æ–ª—å;—Å–∞—Ö–∞—Ä</code>")
